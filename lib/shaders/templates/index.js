export default [
  {
    name: 'phong',
    vert: 'attribute vec3 a_position;\nuniform mat4 model;\nuniform mat4 viewProj;\nuniform mat3 normalMatrix;\n{{#useUV0}}\n  attribute vec2 a_uv0;\n  varying vec2 uv0;\n{{/useUV0}}\n{{#useNormal}}\n  attribute vec3 a_normal;\n  varying vec3 normal_w;\n{{/useNormal}}\nvarying vec3 pos_w;\n{{#useSkinning}}\n  {{> chunks.skinning}}\n{{/useSkinning}}\nvoid main () {\n  vec4 pos = vec4(a_position, 1);\n  {{#useSkinning}}\n    pos = skinMatrix() * pos;\n  {{/useSkinning}}\n  pos_w = (model * pos).xyz;\n  pos = viewProj * model * pos;\n  \n  {{#useUV0}}\n    uv0 = a_uv0;\n  {{/useUV0}}\n  {{#useNormal}}\n    normal_w = normalMatrix * a_normal;\n    normal_w = normalize(normal_w);\n  {{/useNormal}}\n  gl_Position = pos;\n}',
    frag: '{{#useUV0}}\n  varying vec2 uv0;\n{{/useUV0}}\n{{#useNormal}}\n  varying vec3 normal_w;\n{{/useNormal}}\nvarying vec3 pos_w;\nuniform vec3 eye;\nstruct phongMaterial\n{\n  vec3 ambient;\n  vec3 diffuse;\n  vec3 emissive;\n  vec3 specular;\n  float glossiness;\n  float opacity;\n};\n{{#useDiffuse}}\nuniform vec3 diffuseValue;\n{{#useDiffuseTexture}}\nuniform sampler2D diffuseTexture;\n{{/useDiffuseTexture}}\n{{/useDiffuse}}\n{{#useAmbient}}\nuniform vec3 sceneAmbient;\nuniform vec3 ambientValue;\n{{#useAmbientTexture}}\nuniform sampler2D ambientTexture;\n{{/useAmbientTexture}}\n{{/useAmbient}}\n{{#useEmissive}}\nuniform vec3 emissiveValue;\n{{#useEmissiveTexture}}\nuniform sampler2D emissiveTexture;\n{{/useEmissiveTexture}}\n{{/useEmissive}}\n{{#useSpecular}}\nuniform vec3 specularValue;\nuniform float glossinessValue;\n{{#useSpecularTexture}}\nuniform sampler2D specularTexture;\n{{/useSpecularTexture}}\n{{#useGlossinessTexture}}\nuniform sampler2D glossinessTexture;\n{{/useGlossinessTexture}}\n{{/useSpecular}}\n{{#useOpacity}}\nuniform float opacityValue;\n{{#useOpacityTexture}}\nuniform sampler2D opacityTexture;\n{{/useOpacityTexture}}\n{{/useOpacity}}\n{{#useAlphaTest}}\nuniform float alphaTestRef;\n{{/useAlphaTest}}\nphongMaterial getPhongMaterial() {\n  phongMaterial result;\n  result.ambient = vec3(0.0, 0.0, 0.0);\n  result.diffuse = vec3(0.8, 0.8, 0.8);\n  result.emissive = vec3(0.0, 0.0, 0.0);\n  result.specular = vec3(0.0, 0.0, 0.0);\n  result.glossiness = 10.0;\n  result.opacity = 1.0;\n  \n  {{#useAmbient}}\n  result.ambient = ambientValue;\n    {{#useAmbientTexture}}\n      result.ambient = result.ambient * texture2D(ambientTexture, uv0).rgb;\n    {{/useAmbientTexture}}\n  {{/useAmbient}}\n  \n  {{#useDiffuse}}\n  result.diffuse = diffuseValue;\n    {{#useDiffuseTexture}}\n      result.diffuse = result.diffuse * texture2D(diffuseTexture, uv0).rgb;\n    {{/useDiffuseTexture}}\n  {{/useDiffuse}}\n  \n  {{#useEmissive}}\n  result.emissive = emissiveValue; \n    {{#useEmissiveTexture}}\n      result.emissive = result.emissive * texture2D(emissiveTexture, uv0).rgb;\n    {{/useEmissiveTexture}}\n  {{/useEmissive}}\n  {{#useSpecular}}\n  result.specular = specularValue;\n    {{#useSpecularTexture}}\n      result.specular = result.specular * texture2D(specularTexture, uv0).rgb;\n    {{/useSpecularTexture}}\n  {{/useSpecular}}\n  {{#useGlossiness}}\n  result.glossiness = glossinessValue;\n    {{#useGlossinessTexture}}\n      result.glossiness = result.glossiness * texture2D(glossinessTexture, uv0).a;\n    {{/useGlossinessTexture}}\n  {{/useGlossiness}}\n  {{#useOpacity}}\n  result.opacity = opacityValue;\n    {{#useOpacityTexture}}\n      result.opacity = result.opacity * texture2D(opacityTexture, uv0).a;\n    {{/useOpacityTexture}}\n  {{/useOpacity}}\n  return result;\n}\n{{> phong_lighting.frag}}\nvec4 composePhongShading(LightInfo lighting, phongMaterial mtl)\n{\n  vec4 o = vec4(0.0, 0.0, 0.0, 1.0);\n  \n  \n  o.xyz = lighting.diffuse * mtl.diffuse;\n  {{#useAmbient}}\n  o.xyz += sceneAmbient * mtl.ambient;\n  {{/useAmbient}}\n  {{#useEmissive}}\n  o.xyz += mtl.emissive;\n  {{/useEmissive}}\n  {{#useSpecular}}\n  o.xyz += lighting.specular * mtl.specular;\n  {{/useSpecular}}\n  {{#useOpacity}}\n  o.a = mtl.opacity;\n  {{/useOpacity}}\n  return o;\n}\nvoid main () {\n  LightInfo phongLighting;\n  vec3 viewDirection = normalize(eye - pos_w);\n  \n  phongMaterial mtl = getPhongMaterial();\n  {{#useAlphaTest}}\n  if(mtl.opacity < alphaTestRef) discard;\n  {{/useAlphaTest}}\n  phongLighting = getPhongLighting(normal_w, pos_w, viewDirection, mtl.glossiness);\n  gl_FragColor = composePhongShading(phongLighting, mtl);\n}',
    options: [
      { name: 'useSkinning', },
      { name: 'useNormal', },
      { name: 'directionalLightSlots', },
      { name: 'pointLightSlots', },
      { name: 'spotLightSlots', },
      { name: 'useUV0', },
      { name: 'useDiffuse', },
      { name: 'useDiffuseTexture', },
      { name: 'useAmbient', },
      { name: 'useAmbientTexture', },
      { name: 'useEmissive', },
      { name: 'useEmissiveTexture', },
      { name: 'useSpecular', },
      { name: 'useSpecularTexture', },
      { name: 'useGlossinessTexture', },
      { name: 'useOpacity', },
      { name: 'useOpacityTexture', },
      { name: 'useAlphaTest', },
    ],
  },
  {
    name: 'standard',
    vert: 'attribute vec3 a_position;\nuniform mat4 model;\nuniform mat4 viewProj;\n{{#useTexture}}\n  attribute vec2 a_uv0;\n  varying vec2 uv0;\n{{/useTexture}}\n{{#useSkinning}}\n  {{> skinning.vert}}\n{{/useSkinning}}\nvoid main () {\n  vec4 pos = vec4(a_position, 1);\n  {{#useSkinning}}\n    pos = skinMatrix() * pos;\n  {{/useSkinning}}\n  pos = viewProj * model * pos;\n  {{#useTexture}}\n    uv0 = a_uv0;\n  {{/useTexture}}\n  gl_Position = pos;\n}',
    frag: '{{#useTexture}}\n  uniform sampler2D mainTexture;\n  varying vec2 uv0;\n{{/useTexture}}\n{{#useColor}}\n  uniform vec4 color;\n{{/useColor}}\nvoid main () {\n  vec4 o = vec4(1, 1, 1, 1);\n  {{#useTexture}}\n    o *= texture2D(mainTexture, uv0);\n  {{/useTexture}}\n  {{#useColor}}\n    o *= color;\n  {{/useColor}}\n  gl_FragColor = o;\n}',
    options: [
      { name: 'useTexture', },
      { name: 'useColor', },
      { name: 'useSkinning', },
    ],
  },
];