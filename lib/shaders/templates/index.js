export default [
  {
    name: 'phong',
    vert: 'attribute vec3 a_position;\nuniform mat4 model;\nuniform mat4 viewProj;\nuniform mat4 normalMatrix;\n{{#useTexture}}\n  attribute vec2 a_uv;\n  varying vec2 uv;\n{{/useTexture}}\n{{#useNormal}}\n  attribute vec3 a_normal;\n  varying vec3 v_normal;\n{{/useNormal}}\nvarying vec3 v_posWorld;\n{{#useSkinning}}\n  {{> chunks.skinning}}\n{{/useSkinning}}\nvoid main () {\n  vec4 pos = vec4(a_position, 1);\n  {{#useSkinning}}\n    pos = skinMatrix() * pos;\n  {{/useSkinning}}\n  v_posWorld = (model * pos).xyz;\n  pos = viewProj * model * pos;\n  \n  {{#useTexture}}\n    uv = a_uv;\n  {{/useTexture}}\n  {{#useNormal}}\n    v_normal = (model * vec4(a_normal,0.0)).xyz;\n    v_normal = normalize(v_normal);\n  {{/useNormal}}\n  gl_Position = pos;\n}',
    frag: '{{#useTexture}}\n  uniform sampler2D mainTexture;\n  varying vec2 uv;\n{{/useTexture}}\n{{#useColor}}\n  uniform vec4 color;\n{{/useColor}}\n{{#useNormal}}\n  varying vec3 v_normal;\n{{/useNormal}}\nvarying vec3 v_posWorld;\n{{#directionalLightSlots}}\n  uniform vec3 dir_light{{.}}_direction;\n  uniform vec3 dir_light{{.}}_color;\n{{/directionalLightSlots}}\n{{#pointLightSlots}}\n  uniform vec3 point_light{{.}}_position;\n  uniform vec3 point_light{{.}}_color;\n  uniform float point_light{{.}}_range;\n{{/pointLightSlots}}\n{{#spotLightSlots}}\n  uniform vec3 spot_light{{.}}_position;\n  uniform vec3 spot_light{{.}}_direction;\n  uniform vec3 spot_light{{.}}_color;\n  uniform float spot_light{{.}}_range;\n  uniform vec2 spot_light{{.}}_spot;\n{{/spotLightSlots}}\n  vec3 computeDirecionalLighting(vec3 normal)\n  {\n    vec3 color = vec3(0, 0, 0);\n    float ndl = 0.0;\n    {{#directionalLightSlots}}\n      ndl = max(0.0, dot(normal, -dir_light{{.}}_direction));\n      color += dir_light{{.}}_color * ndl;\n    {{/directionalLightSlots}}\n    return color;\n  }\n  vec3 computePointLighting(vec3 normal, vec3 positionW)\n  {\n    vec3 color = vec3(0, 0, 0);\n    float ndl = 0.0;\n    vec3 lightVec = vec3(0, 0, 0);\n    float attenuation = 1.0;\n    {{#pointLightSlots}}\n    lightVec = point_light{{.}}_position - positionW;\n    attenuation = max(0., 1.0 - length(lightVec) / point_light{{.}}_range);\n    ndl = max(0.0, dot(normal, normalize(lightVec)));\n    color += point_light{{.}}_color * ndl * attenuation;\n    {{/pointLightSlots}}\n    return color;\n  }\n  vec3 computeSpotLighting(vec3 normal, vec3 positionW)\n  {\n    vec3 color = vec3(0, 0, 0);\n    float ndl = 0.0;\n    vec3 lightVec = vec3(0, 0, 0);\n    float attenuation = 1.0;\n    float cosConeAngle = 1.0;\n    {{#spotLightSlots}}\n    lightVec = spot_light{{.}}_position - positionW;\n    attenuation = max(0., 1.0 - length(lightVec) / spot_light{{.}}_range);\n    cosConeAngle = max(0., dot(spot_light{{.}}_direction, -normalize(lightVec)));\n    cosConeAngle = cosConeAngle < spot_light{{.}}_spot.x ? 0.0 : cosConeAngle;\n    cosConeAngle = pow(cosConeAngle,spot_light{{.}}_spot.y);\n    ndl = max(0.0, dot(normal, normalize(lightVec)));\n    color += spot_light{{.}}_color * ndl * attenuation * cosConeAngle;\n    {{/spotLightSlots}}\n    return color;\n  }\nvoid main () {\n  vec4 o = vec4(0, 0, 0, 1);\n  {{#directionalLightSlots}}\n    o.xyz += computeDirecionalLighting(v_normal);\n  {{/directionalLightSlots}}\n  {{#pointLightSlots}}\n    o.xyz += computePointLighting(v_normal, v_posWorld);\n  {{/pointLightSlots}}\n  {{#spotLightSlots}}\n    o.xyz += computeSpotLighting(v_normal, v_posWorld);\n  {{/spotLightSlots}}\n  {{#useTexture}}\n    o *= texture2D(mainTexture, uv);\n  {{/useTexture}}\n  {{#useColor}}\n    o *= color;\n  {{/useColor}}\n  gl_FragColor = o;\n}',
    options: [
      { name: 'useTexture', },
      { name: 'useColor', },
      { name: 'useSkinning', },
      { name: 'useNormal', },
      { name: 'useLight', },
    ],
  },
  {
    name: 'standard',
    vert: 'attribute vec3 a_position;\nuniform mat4 model;\nuniform mat4 viewProj;\n{{#useTexture}}\n  attribute vec2 a_uv0;\n  varying vec2 uv0;\n{{/useTexture}}\n{{#useSkinning}}\n  {{> chunks.skinning}}\n{{/useSkinning}}\nvoid main () {\n  vec4 pos = vec4(a_position, 1);\n  {{#useSkinning}}\n    pos = skinMatrix() * pos;\n  {{/useSkinning}}\n  pos = viewProj * model * pos;\n  {{#useTexture}}\n    uv0 = a_uv0;\n  {{/useTexture}}\n  gl_Position = pos;\n}',
    frag: '{{#useTexture}}\n  uniform sampler2D mainTexture;\n  varying vec2 uv0;\n{{/useTexture}}\n{{#useColor}}\n  uniform vec4 color;\n{{/useColor}}\nvoid main () {\n  vec4 o = vec4(1, 1, 1, 1);\n  {{#useTexture}}\n    o *= texture2D(mainTexture, uv0);\n  {{/useTexture}}\n  {{#useColor}}\n    o *= color;\n  {{/useColor}}\n  gl_FragColor = o;\n}',
    options: [
      { name: 'useTexture', },
      { name: 'useColor', },
      { name: 'useSkinning', },
    ],
  },
];